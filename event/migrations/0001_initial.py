# Generated by Django 5.1.6 on 2025-02-27 21:43

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('location_title', models.CharField(blank=True, max_length=255, null=True)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('additional_contact_name', models.CharField(blank=True, max_length=255, null=True)),
                ('additional_contact_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('delivery_track_id', models.CharField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Speaker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('occupation', models.CharField(blank=True, max_length=255, null=True)),
                ('facebook', models.URLField(blank=True, null=True)),
                ('linkedin', models.URLField(blank=True, null=True)),
                ('photo', models.ImageField(blank=True, null=True, upload_to='speakers/photos/')),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('category', models.CharField(choices=[('Concert', 'Concert'), ('Conférence', 'Conférence'), ('Festival', 'Festival'), ('Atelier', 'Atelier'), ('Autre', 'Autre')], max_length=50)),
                ('start_datetime', models.TextField()),
                ('end_datetime', models.TextField(blank=True, null=True)),
                ('timezone', models.CharField(blank=True, max_length=100, null=True)),
                ('country', models.CharField(blank=True, max_length=255, null=True)),
                ('online_link', models.URLField(blank=True, null=True)),
                ('capacity', models.PositiveIntegerField()),
                ('ticket_open_date', models.TextField(blank=True, null=True)),
                ('ticket_close_date', models.TextField(blank=True, null=True)),
                ('organizer_name', models.CharField(max_length=255)),
                ('organizer_contact', models.EmailField(max_length=254)),
                ('organizer_website', models.URLField(blank=True, null=True)),
                ('cover_image', models.ImageField(blank=True, null=True, upload_to='events/covers/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png', 'webp'])])),
                ('promo_video', models.FileField(blank=True, null=True, upload_to='events/videos/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['mp4', 'mov', 'avi'])])),
                ('tags', models.JSONField(blank=True, default=list, null=True)),
                ('confirmation_email', models.TextField(blank=True, null=True)),
                ('reminder_messages', models.BooleanField(default=False)),
                ('qr_code', models.BooleanField(default=False)),
                ('access_control', models.BooleanField(default=False)),
                ('moderation', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('addresses', models.ManyToManyField(blank=True, to='event.address')),
            ],
        ),
        migrations.CreateModel(
            name='EventGallery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='events/gallery/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png', 'webp'])])),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_images', to='event.event')),
            ],
        ),
        migrations.AddField(
            model_name='event',
            name='gallery',
            field=models.ManyToManyField(blank=True, related_name='events', to='event.eventgallery'),
        ),
        migrations.AddField(
            model_name='event',
            name='speakers',
            field=models.ManyToManyField(blank=True, to='event.speaker'),
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('price', models.DecimalField(decimal_places=2, help_text='Le prix ne peut pas être negatif', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('quantity', models.PositiveIntegerField(help_text='Au moins 1 billet doit être disponible', validators=[django.core.validators.MinValueValidator(1)])),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_tickets', to='event.event')),
            ],
        ),
        migrations.AddField(
            model_name='event',
            name='tickets',
            field=models.ManyToManyField(blank=True, related_name='event_tickets', to='event.ticket'),
        ),
    ]
